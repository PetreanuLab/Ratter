% [sma, sched_wave_name] = add_scheduled_wave(sma, {'name', ''}, {'preamble', 1}, ...
%                                {'sustain', 0}, {'refraction', 0}, {'dio_line', -1})
%
% Add a Scheduled Wave to the list of waves registered with the sma State
% Machine assembler object. Returns the updated sma object, and the name of
% the new scheduled wave.
%
% For an introduction to what scheduled waves are, see the section below
% entitled "WHAT IS A SCHEDULED WAVE." Note that as currently configured,
% you can have up to 32 different scheduled waves defined per state
% machine, no more. 
%
% 
% RETURNS: 
% --------
%
% sma      The updated State Machine Assembler object, after the scheduled
%          wave has been added.
%
% name     The name of the new added wave. This is a useful return
%          parameter if no name was specified when creating the new wave
%          (see below); here you can find out the unique name that was
%          automatically assigned to the new wave. (Usually, however, when
%          you don't specify a name, its because you don't care what it is 
%          and you don't need this return paranmeter.)
%
%
% PARAMETERS:
% -----------
%
% sma      The instantiation of the StateMachineAssembler object to which
%          the scheduled wave will be added.
%
% OPTIONAL PARAMETERS:
% ---------------------
%
% name      A string that will be the name of the new scheduled wave. If a
%           scheduled wave with this name already exists in this sma, a
%           warning and error will ensue. If this parameter is left empty,
%           then a new unique name for this sma will be created. 
%
%           To refer to the "In" and "Out" events for the scheduled waves
%           (for example, you might do this if you want to add a state from 
%           which such events trigger a state change), use name_In and
%           name_Out. After replacing "name" with whatever the name
%           actually is, of course.
%
% preamble  Time, in secs, which elapses before the scheduled wave is
%           triggered and its "In" event occurs. Default value is 1 sec.
%
% sustain   Time, in secs, which elapses between the scheduled waves' "In" 
%           event and its "Out" event. Default value is 0.
%
% refraction   Time, in secs, which elapses after a scheduled wave's "Out"
%           event and the time at which triggering it again is effective.
%           Before this time, triggering requests are ignored. Default
%           value of refraction is 0. [**must double-check that refraction
%           starts at "Out" event, not "In" event**]
%
% dio_line  Physical line on the DIO card that will carry the scheduled
%           wave signal: between preamble and preamble+sustain this line
%           will be High (+5V). [** Double-check that it is indeed +5**]
%           A value of -1 here indicates that the scheduled wave is purely 
%           virtual and doesn't correspond to a physical out line. Default 
%           value of dio_line is -1.
%
%
% EXAMPLES:
% ----------
%
% >> sma = add_scheduled_wave(sma, 'name', 'twosecs',  'preamble', 2);
%
%       Registers a scheduled wave called 'twosecs' that will have both "In" 
%       and "Out" events two seconds after being triggered, and has no
%       refractory period nor does it have a physical DIO line.
%          Later, to use such a wave, you might add a state in which its
%       start is triggered:
%          >> sma = add_state('output_actions', {'SchedWaveTrig', 'twosecs'});
%       And you later add another state in which the end of the preamble
%       triggers a state change:
%          >> sma = add_state('input_to_statechange', {'twosecs_In', ...
%                     'state_to_jump_to_when_twosec_preamble_finishes'});
%
% >> [sma, name] = add_scheduled_wave(sma, 'sustain', 3);
%
%       Registers a scheduled wave with the default preamble of 1 sec, a
%       wait between its "In" and "Out" events of 3 secs, and get back the
%       automatic name assigned by the assembler.
%
%
% WHAT IS A SCHEDULED WAVE, ANYWAY?
% ---------------------------------
%
% Scheduled waves are alarm clocks that you can set and use in your state
% machine. True finite state machines are very clear but quite limited;
% having these alarm clocks makes a number of things much easier to code,
% although it means our state machine isn't really a simple finite state
% machine any longer.
%
% A scheduled wave is defined by three parameters, which are specified when
% you register the scheduled wave using add_scheduled_wave.m these three
% parameters are: the 'preamble', the 'sustain', and the 'refraction.
%    When you trigger the start of a scheduled wave, preamble seconds
% elapse before anything occurs due to the scheduled wave. When the
% preamble time is over, an '_In' event from the wave occurs (and can be
% used in the state machine to trigger state transitions-- see
% input_to_statechange in add_state.m). After that, sustain seconds elapse,
% and then an '_Out' event occurs. After that, 'refraction' seconds elapse
% before you can trigger the start of a scheduled wave again (by default
% 'refraction' is 0).
%
% Most often, people use only the preamble, and use the scheduled wave as a
% simple alarm clock thatcan be made to trigger state transitions. As
% currently configured, you can use up to 32 scheduled waves.
%



% Written by Carlos Brody October 2006

function [sma, sched_wave_name] = add_scheduled_wave(sma, varargin)
   
   pairs = { ...
     'name'               ''    ;  ...
     'preamble'            1    ;  ...
     'sustain'             0    ;  ...
     'refraction'          0    ;  ...
     'dio_line'           -1    ;  ...
   }; parseargs(varargin, pairs);

   already_have_schedwave_out = ~isempty(sma.sched_waves);   
   if isempty(name),
      sched_wave_name = ['timer' num2str(length(sma.sched_waves)+1)];
   else
      sched_wave_name = name;
   end;
   
   
   % --- BEGIN error-checking ---
   Tup = find(strcmp('Tup', sma.input_map(:,1)));
   if isempty(Tup),
      error('Huh??? input map has no Tup entry?');
   end;
      
   [prev_names{1:length(sma.sched_waves)}] = deal(sma.sched_waves.name);
   if ~isempty(find(strcmp(sched_wave_name, prev_names))),
      error(['A scheduled wave with name ' sched_wave_name ' already ' ...
             'exists.']);
   end;   
   % --- END error-checking ---
   
   
   % We'll add columns for the In and Out events of this sched wave,
   % and we'll put them right behind the Tup:
   in_col  = sma.input_map{Tup, 2};
   out_col = sma.input_map{Tup, 2}+1;
   % make space for the two new cols and move everything after and
   % including Tup forwards by two columns:
   sma.states = [sma.states cell(rows(sma.states),2)];
   sma.states(:,in_col+2:end) = sma.states(:,in_col:end-2);
   sma.states(:,in_col)  = sma.default_actions;
   sma.states(:,out_col) = sma.default_actions;
   % repeat for iti_states:
   sma.iti_states = [sma.iti_states cell(rows(sma.iti_states),2)];
   sma.iti_states(:,in_col+2:end) = sma.iti_states(:,in_col:end-2);
   sma.iti_states(:,in_col)  = sma.default_iti_actions;
   sma.iti_states(:,out_col) = sma.default_iti_actions;

   
   % Now add our new entries to the input map:
   sma.input_map = [sma.input_map(1:in_col-1,:) ; ...
                    {[sched_wave_name '_In'],  in_col ; ...
                     [sched_wave_name '_Out'], out_col} ; ...
                   sma.input_map(in_col:end,:)];
   % 
   sma.input_line_map = [sma.input_lin
   % And adjust the Tup entry in the input map:
   sma.input_map{Tup+2,2} = sma.input_map{Tup+2,2} + 2;

   % As well as adjusting the self_timer map:
   for i=1:rows(sma.self_timer_map),
      sma.self_timer_map{i,2} = sma.self_timer_map{i,2}+2;
   end;
   % And the output map:
   for i=1:rows(sma.output_map),
      sma.output_map{i,2} = sma.output_map{i,2} + 2;
   end;
   

   if ~already_have_schedwave_out,
      % --- create a column for the scheduled wave triggering signals:
      if ~isempty(sma.states),         
         sma.states = [sma.states num2cell(zeros(rows(sma.states),1))];
      else
         sma.states = cell(0, cols(sma.states)+1);
      end;
      % repeat for iti_states:
      if ~isempty(sma.iti_states),         
         sma.iti_states = [sma.iti_states num2cell(zeros(rows(sma.iti_states),1))];
      else
         sma.iti_states = cell(0, cols(sma.iti_states)+1);
      end;
      
      sma.output_map = [sma.output_map ; {'SchedWaveTrig' cols(sma.states)}];
   end;
   
   
   % Now store it in the scheduled waves list
   snum = length(sma.sched_waves)+1;   
   sma.sched_waves(snum).name       = sched_wave_name;
   sma.sched_waves(snum).id         = snum-1;
   sma.sched_waves(snum).in_column  = in_col;
   sma.sched_waves(snum).out_column = out_col;
   sma.sched_waves(snum).dio_line   = dio_line;
   sma.sched_waves(snum).preamble   = preamble;
   sma.sched_waves(snum).sustain    = sustain;
   sma.sched_waves(snum).refraction = refraction;
   
   
   