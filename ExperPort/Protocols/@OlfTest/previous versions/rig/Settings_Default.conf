%     Settings/Settings_Default.conf
%     Default Settings file; BControl system;
%     this file written by Sebastien Awwad, 2007
%
%     NOTICE!
%       Modifications should be made only to Settings_Custom.conf or to
%       manually created and manually loaded settings files.
%       Please DO NOT MODIFY Settings_Template.conf & Settings_Default.conf
%
%     All custom settings for specific labs or machines should be made to
%       Settings_Custom.conf or to new Settings files manually loaded.
%
%     More help can be found at the Brody lab BControl wiki:
%           http://brodylab.princeton.edu/bcontrol
%
%
%     FORMAT SPECIFICATION FOR SETTINGS FILES:
%           (intuitive enough that you probably don't need to read this)
%
%          <setting1 group name>;  <setting1 name>; <setting1 value>;
%          <setting2 group name>;  <setting2 name>; <setting2 value>;
%        OR:
%          <s1 g name>      ; <s1 name>;    <s1 val>     % commentcomment
%           <s2 g name>;  <s2 name> ; <s2 val>     
%          <s3 g name>; <s2 name> ; ;       % empty value ('')
%        ETC. See rules and example below.
%
%     - Phrases (setting group names, setting names, or setting values)
%         must be separated by ONE SEMI-COLON. Spaces/tabs between the
%         phrases are entirely unrestricted. 
%
%     - WHITESPACE treatment:
%         -- NO linebreak/newline characters are permitted anywhere between
%              the START of a setting's group name and the END its value
%              string.
%              e.g. In the line    "  * group ^ ; sname; sval *"
%                       newline/linebreak chars are okay at e.g. the
%                       positions marked by asterisks*, but NOT ALLOWED at
%                       e.g. the position marked with a carat.
%         -- LEADING and TRAILING spaces/tabs for all phrases are
%              DISCARDED.
%              e.g. "   Group One  ; " is interpreted as "Group One".
%         -- Spaces/tabs WITHIN (i.e. not leading or trailing) setting
%              values are PERMITTED and are INCLUDED in the loaded value.
%         -- However, whitespace WITHIN group NAMES and setting NAMES is
%              NOT PERMITED and will interrupt settings loading and return
%              an informative error ID and message.
%
%     - Matlab-style COMMENTING is respected in the settings file.
%
%     - SETTING NAME strings and SETTING GROUP NAME strings must be valid
%       as MATLAB variables - i.e.  no special characters, must start with
%       a letter, not empty, etc. Also, they cannot match certain
%       SettingsObject reserved words like 'any' or 'all'. (current list in
%       variable reserved_names below).
%
%     - NUMERIC values are interpreted, stored, and retrieved as such (if
%         they are recognized by str2double).
%
%     - Line length is not unlimited. Characters after the 4095th character
%         on a line are not read.
%
%     - Settings (and groups and values) are case-sensitive.
%
%     - 'ALL' (case-insensitive) is not permitted as a group or setting
%          name.
%
%     - Double-quotes in setting values are removed.
%
%
%     An EXAMPLE format:
%          %-------------------------------------example start
%          % blah blah blah
%          GENERAL; Main_Code_Directory;   /ratter/ExperPort
%          GENERAL; dbl_quotes_ignored;   "/ratter/ExperPort"
%          GENERAL;NoSpacingIsFine;0;
%          GENERAL;EmptyValuesAreEmptyStrings; ;
%           
%          FAVORITES;   food;      tomato soup    ; %internal spaces saved
%          DIOLINES  ;    left1water   ;   1     %terminal ; unnecessary
%          EXAMPLE ; QuiteEmpty; ;   %this one will have an empty string as its value
%
%          % commentcomment
%          DIOLINES    ;  right1water ;   2 
%          FAVORITES;  animal; rat            %    commentcommentcomment
%
%          % blah
%          %-------------------------------------example end
%
%
%     You can find example Settings_Custom.conf files in the file
%       Example_Settings_Custom.conf


%     -------------------------------------------------------------
%     -------------------------------------------------------------
%     --------------    BCONTROL DEFAULT SETTINGS    --------------
%     -------------------------------------------------------------
%     -------------------------------------------------------------



%     -------------------------------------------------------------
%     -------  GENERAL SETTINGS
%     -------------------------------------------------------------

%     Directory settings notes:
%       - PLEASE SPECIFY ALL DIRECTORIES IN Settings_Custom.conf
%       - It is best to use full paths.
%       - You must use the filesep (/ or \) appropriate for your system.

%     Please set this setting to the directory (full path) where BControl
%       code lives, and from which BControl should be run (i.e. the
%       directory that contains the Protocols, Plugins, Modules, etc.
%       directories.)
%     When EMPTY, a warning will be displayed and old code using the global
%       Solo_rootdir will be given the value of the directory BControl is
%       running from each time.
%
%     ((I think this shouldn't be a setting, but a global that is *always*
%         determined from the directory from which the code is run.   -s))
%
GENERAL; Main_Code_Directory; ;
       

%     Select a directory in which to save and from which to load
%       experimental settings and data.
%     When EMPTY, old code using the global Solo_datadir will be given the
%       value <Solo_rootdir>/../SoloData
%
GENERAL; Main_Data_Directory; ;




%     The directory to contain sounds that are saved for use in newer
%       protocols:
%
GENERAL; Sound_Directory;         Sounds  % currently unused



%     When to halt execution and start the debugger:
%     A value of "error" will halt execution on any error.
%     A   "dbstop if ..." command in initialization will use this value.
%
GENERAL; dbstop_if;             error
GENERAL; use_timers; 1;




%     -------------------------------------------------------------
%     -------  AUXILIARY SCRIPTING (on experiment start/stop)
%     -------------------------------------------------------------
%     Sometimes a lab may want third party software to be started at
%       specific times during the experiment - for example, video
%       recording. Specify scripts to be called using these settings.
%
%     When an experiment is started ("Run" is pressed), BControl will call
%       the start script specified here. When the experiment is ended
%       (when "End" is pressed), the stop script specified here is run.
%     These calls are made from Dispatcher.
%
%     If Disable_Aux_Scripts is not 0 - even if it's just not
%       set - then third party scripts will not be run.
%
%     Please use full paths!
%
%     The following arguments are passed to all scripts (after any
%       arguments listed in the settings) in order:
%           Protocol name
%           Experimenter name   (if protocol includes the saving plugin)
%           Rat name            (if protocol includes the saving plugin)
%
AUX_SCRIPT; Disable_Aux_Scripts;	1;	% ALL HOOKS ALWAYS OFF unless this is 0
AUX_SCRIPT; Enable_On_Run_Script;	0;	% 1: dispatcher runclick->start script below
AUX_SCRIPT; On_Run_Script;          ;       % filename of script to run
AUX_SCRIPT; On_Run_Args;            ;   % arguments to pass to the script above
AUX_SCRIPT; Enable_On_End_Script;   0;	% 1: dispatcher endclick->start script below
AUX_SCRIPT; On_End_Script;          ;       % filename of script to run
AUX_SCRIPT; On_End_Args;            ;   % arguments to pass to the script above

%     Brody lab records video of our rat experiments.
%     Later, when a position on the pokes plot is clicked, the segment of
%       the video relating to the corresponding minute of the experiment is
%       played.
%     One might want other external scripts to be run when the pokes plot
%       plugin is clicked, so we allow any scripts here.
%
%     Note that there is also a toggle on the pokes plot to disable this
%       feature.
%
%     The arguments passed to this script are the same as for the other
%       hooks above - except that after them, we also pass:
%           TimeE		time corresponding to clicked point (from start of experiment)
%           TrialNum	trial number corresponding to clicked point
%           TimeT       time corresponding to clicked point (from start of trial)
%
AUX_SCRIPT; Enable_On_PPClick_Script; 0; % 1: run script below when pokes plot position is clicked and toggle on pokesplot is on
AUX_SCRIPT; On_PPClick_Script; ;    % filename of script to run
AUX_SCRIPT; On_PPClick_Args; ;      % arguments to pass to the script above


%     -------------------------------------------------------------
%     -------  RIGS - TYPE OF REAL-TIME STATE MACHINE
%     -------------------------------------------------------------
%  fake_rp_box determines what kind of Real-Time State Machine, and what
%    kind of sound machine, are to be run.
%
%  Set fake_rp_box in Settings_Custom.conf to suit the RTSM your lab is
%    running.
%    
%  fake_rp_box values and the configurations they correspond to:
%
%  fake_rp_box      Behavior
%  0        -->     Use the TDT RM1 boxes   
%  1      	-->     Use FakeRP/@lunghao1 and FakeRP/@lunghao2 objects as
%                     virtual machines
%  2      	-->     Use the RT Linux state machine
%  20       -->     Use the RT Linux state machine, new version (You must have a server running RTFSM version > 100; June 2008)
%  3      	-->     Use Modules/@SoftSMMarkII and Modules/@softsound
%                       objects as virtual machines.
%                       These are recommended over the old @lunghao1 and
%                       @lunghao2 emulators.
%  4      	-->     Use Modules/@softsm and Modules/@softsound
%                       objects as virtual machines.
%                       Note that @softsm has no scheduled waves.
%
%     fake_rp_box defaults to 3 (for the SoftSMMarkII emulator).
%
RIGS; fake_rp_box;          3;

%     The value below is currently only relevant for fake_rp_box==2.
%       Set it to 1 if there is one RTLSM machine controlling each
%       box. At Brody lab, some of our machines are set up this way, and
%       others control several boxes to save space and computer resources.
RIGS; lone_rig;             0;


%     -------------------------------------------------------------
%     -------  RIGS - ADDRESSES OF SOUND AND STATE MACHINES
%     -------------------------------------------------------------
%     These settings specify the address(es) of the machine(s) running the
%       state machine and sound machine servers.
%
%     These values should be set in Settings_Custom.conf for individual
%       machines to pair MATLAB-running machines with those directly
%       controlling the behavioral rigs.
%
%     For example, in Brody lab, the custom settings file is modified for
%       each rig such that:
%
%           (hostname of)		RTLSM rig (value of state_machine_server
%           machine running		and sound_machine_server settings on that
%           MATLAB				machine)
%           ------------        --------------------------
%           
%           brodyrigxp01		brodyrigrt01        (one RTLSM machine per box)
%           brodyrigxp02		brodyrigrt02        ''
%           (etc....)
%           brodyrigxp07        brodyrigrt07        (one RTLSM machine for three boxes)
%           brodyrigxp08        brodyrigrt07        ''
%           brodyrigxp09        brodyrigrt07        ''
%           brodyrigxp10        brodyrigrt10        ''
%           brodyrigxp11        brodyrigrt10        ''
%           (etc....)
%       
%     It's just fine for them to be empty if an emulator is in use instead
%       of a real rig (e.g. SoftSMMarkII (fake_rp_box=3) instead of RTLSM
%       (fake_rp_box=2)).
%    
RIGS; state_machine_server;     ;
RIGS; sound_machine_server;     ;



%     -------------------------------------------------------------
%     -------  SOUND SETTINGS
%     -------------------------------------------------------------

%     The sample rate for sound recording is specified in Hz below,
%       and should be changed in the custom settings file to suit the
%       sound server being used.
%     
%     The value below is used just as it was in old code.
%
%     The value should be set to 200000 when using fake_rp_box value 2
%       (the Real-Time LINUX State Machine object)
%
%     This is the emulator default.
%
%     The value of this setting (selected in Settings_Custom.conf) is
%       treated as a default, and software autoconfiguration may
%       override it, in exactly the same way as was done with its
%       global variable predecessor.
%
SOUND; sound_sample_rate;       44100;

%     This setting was not used in old code, but should specify the
%       directory that contains sounds that are saved for use in protocols
%       (optional).
SOUND; Sound_Directory;         Sounds  % currently unused



%     -------------------------------------------------------------
%     -------  DIOLINES (Output Mapping)
%     -------------------------------------------------------------
%     This settings group only contains (and MAY ONLY contain!) the names
%       and values of the various output channels that may be used by your
%       state machines to identify and turn on and off associated outputs
%       (water, lights, odors, etc.) in an outputs bitfield.
%
%     These values should be specified in Settings_Custom.conf to suit
%       your experimental arrangements.
%     
%     COMPATIBILITY NOTE:
%     The behavior of these variables in the new system is exactly as it
%       was in the old, and they are loaded into corresponding globals for
%       compatibility, along with the fake_rp_box value.
%
%
%     Individual values here are the values added to the outputs bitfield
%       when the corresponding output is "turned on". The log2 of these
%       values gives the channel number, the position in the bitfield:
%
%           sample output bitfield (6 channels for example)
%              0     1     0     0     1     1    
%              ^     ^     ^     ^     ^     ^    total bitfield value: 19
%              |     |     |     |     |     |
%   channel 5 off    |  ch3 off  |  ch1 on   |
%     +0*2^5         |   +0*2^3  |  +1*2^1   ch0 on
%                ch4 on          |           +1*2^0
%                +1*2^4       ch2 off
%                             +0*2^2 <--- we'll refer to 2 as the "channel
%                                           number" and 2^2 as the "value"
%
%     In a setup in which each RTLSM is controlling multiple rigs, the
%       channel map is offset using the DIOLINES_MISC;offset value.
%       This divides the output channel space in the RTLSM so that several
%       rigs can be controlled simultaneously, each with an incremental
%       offset (e.g. first rig offset 0, second 32, third 1024).
%
%     The defaults below match the standard old output map for fake_rp_box
%       values of 0, 1, 3, and 4.
DIOLINES;       center1water;           NaN
DIOLINES;       center1led;             8
DIOLINES;       left1water;             1
DIOLINES;       left1led;               4
DIOLINES;       right1water;            2
DIOLINES;       right1led;              16
DIOLINES;       center2water;           NaN
DIOLINES;       center2led;             NaN
DIOLINES;       left2water;             NaN
DIOLINES;       left2led;               NaN
DIOLINES;       right2water;            NaN
DIOLINES;       right2led;              NaN
DIOLINES_MISC;  offset;                 0;    %     This is the number of channels to shift, not the bitfield value of the shift.

%     -------------------------------------------------------------
%     -------  INPUTLINES (Input Mapping)
%     -------------------------------------------------------------
%     Here we specify the input map:
%       the types of input events and their order in the input channels.
%
%     For each type specified here, two channels will be established: one
%       for onset and one for offset.
%
%     For example, in Brodylab, our settings are:
%       C  1,  L  2,  R  3
%       This means that our input channel map looks like this:
%           Channel 0:      C on  (center poke in)
%           Channel 1:      C off (center poke out)
%           Channel 2:      L on  (left   poke in)
%           Channel 3:      L off (left   poke out)
%           Channel 4:      R on  (right  poke in)
%           Channel 5:      R off (right  poke out)
%
%     In a setup in which each RTLSM is controlling multiple rigs, the
%       channel map is offset using the INPUTLINES_MISC;offset value.
%       This divides the input channel space in the RTLSM so that several
%       rigs can be controlled simultaneously, each with an incremental
%       offset (e.g. first rig offset 0, second 3, third 6).
%     In the example above with an offset of 3, the map looks like:
%           Channel 6:      C on  (center poke in)
%           Channel 7:      C off (center poke out)
%           Channel 8:      L on  (left   poke in)
%           Channel 9:      L off (left   poke out)
%           Channel 10:     R on  (right  poke in)
%           Channel 11:     R off (right  poke out)
%
%     The settings below are the defaults, and leaving them as such should
%       result in old behavior with no backward compatibility problems.
%      
INPUTLINES;         C;      1
INPUTLINES;         L;      2
INPUTLINES;         R;      3
INPUTLINES_MISC;    offset; 0


%     -------------------------------------------------------------
%     -------  CVS SETTINGS: DATA CENTRALIZATION
%     -------------------------------------------------------------
%     
%     BControl can optionally submit behavioral data/settings files saved
%       on a rig to a central data repository you specify. This will be
%       employed automatically by the Save/Load plugin for dispatcher and
%       the End button on the RunRats gui.
%
%     TO ENABLE COMMITTING OF DATA TO CVS WHEN DATA IS SAVED,
%       Please set CVSROOT_STRING in Settings_Custom.conf.
%       If it is blank, cvs is not used.
%
%     The setting CVSROOT_STRING is passed to cvs commands (with -d flag).
%
%     Sample CVSROOT_STRING values:
%           :ext:rig05@brodylab.princeton.edu:/cvs
%           :ssh:username@datarepository.university.edu:/repositorydir
%
%     Sample resulting command:
%       cvs -d :ext:rig05@brodylab.princeton.edu:/cvs add somedata.mat
%
%     CVS documentation is widely available.
%
CVS; CVSROOT_STRING; ;					% when blank, cvs is not used




%     -------------------------------------------------------------
%     -------  COMPATIBILITY
%     -------------------------------------------------------------
%     The BControl startup script uses the new setting files system that
%       this file is part of; however, for backward compatibility, it also
%       loads setting values important to older code into globals. This
%       value should not be changed in the custom settings unless you are
%       *quite* sure that you do not depend on any old code. Frankly, it's
%       harmless, so leave it as 0.
COMPATIBILITY; Skip_Loading_Old_Settings_Into_Globals; 0;



%     -------------------------------------------------------------
%     -------  Misc. Sound Emulator Settings
%     -------------------------------------------------------------
% The following is ONLY relevant when NOT using the RT Linux sound server.
% When using the virtual sound machine, this variable determines whether
%   sounds are played or not. Sometimes sounds are not played with the
%   precise timing of the RT Linux server; turning them off permits
%   examining the timing of states in better detail.  
EMULATOR; softsound_play_sounds; 1;



%     -------------------------------------------------------------
%     -------  Misc. Hardware Settings
%     -------------------------------------------------------------
% The time needed by the pump to inject a unit of water (ontime) and for
%   the piston to recover (offtime). These values have been determined by 
%   trial and error, to minimise total delivery time without damaging the 
%   pump - for our pumps. Feel free to set your own values in the Custom
%   file.
%
PUMPS; pump_ontime;             0.150;
PUMPS; pump_offtime;            0.10;
