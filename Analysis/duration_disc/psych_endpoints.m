function [first__binnedy last__binnedy mydates badfits] = psych_endpoints(ratname, varargin)
% Plot the extreme ends of the psychometric curves of given rat
% Determines whether there is a systematic left-end or right-end bias in a
% task group / particular individual.

pairs = {...
    'psychthresh', 1 ; ...  % consider a session as being psychometric only if it has over psychthresh trials with the psych flag on
    'vanilla_task', 0 ; ...
    'experimenter','Shraddha' ; ...
    % Which dates to use? ---------------------
    'use_dateset', '' ; ... % [psych_before | psych_after | given | span_surgery | '']
    'last_few_pre', 5; ...
    'given_dateset', {} ; ... % when 'use_dateset' = given_set, this cell array should contain a set of dates (yymmdd) for which superimposed graphs will be plotted
    'from','000000';...
    'to', '999999';...
    'dstart', 1; ... % option to plot only session A to session B; this is where you set value for A...
    'dend', 1000; ... % and this is where you set value for B
    'lastfew', 1000; ... % option to plot only last X sessions
    'first_few', 3; ...
    % Plotting & Plot appearance -------------------------
    'noplot', 0 ; ... % set to 1 to suppress plots generated by this function
    'usefig', 0 ; ... % if you want all curves to be plotted on a single figure you provide
    'mark_breaks', 1; ... % when 'true', marks data following 1+ day of break
    }; parse_knownargs(varargin,pairs);


ratrow = rat_task_table(ratname);
task = ratrow{1,2};
if strcmpi(task(1:3),'dua'),
    pitch=1;
    [binmin binmax] = calc_pair('p',sqrt(8*16),1);
    ylbl = 'High';
else
    pitch=0;
    binmin=200;
    binmax=500;
    ylbl = 'Long';
end;

psychf='psych';
if strcmpi(task(1:3),'dua')
    psychf='pitch_psych';
end;

datafields = {psychf};

% ----------------------------------------------------------
% BEGIN Date set retrieving module: Use this piece of code to get either
% a pre-buffered date set, a range, or a specified date_set.
% To use this, have two switches in your 'pairs' cell array:
% 1 - 'vanilla_task' - binary; indicates whether rat was lesioned during
% vanilla task (1) or not (0)
% 2 - 'use_dateset' - specifies how to obtain dates to analyze

% prepare incase file needs to be loaded
global Solo_datadir;
if isempty(Solo_datadir), mystartup; end;
outdir = [Solo_datadir filesep 'Data' filesep experimenter filesep ratname filesep];

if vanilla_task
    date_set = ratrow{1,rat_task_table('','action','get_postpsych_col')};
    date_set2 = ratrow{1,rat_task_table('','action','get_prepsych_col')};
    dates = {date_set2{2}, date_set{end}};
    %get_fields(ratname,'use_dateset','given',
    %'given_dateset',dates,'datafields',datafields);
    get_fields(ratname,'use_dateset','range', 'from', dates{1}, 'to',dates{2}, 'datafields',datafields);
    psych = eval(psychf);
else
    switch use_dateset
        case 'psych_before'
            infile = 'psych_before';
            fname = [outdir infile '.mat'];
            load(fname);
            psych = psychflag;
        case 'psych_after'
            infile = 'psych_after';
            fname = [outdir infile '.mat'];
            load(fname);
            psych = psychflag;
        case 'given'
            if cols(given_dateset) > 1, given_dateset = given_dateset'; end;
            dates = given_dateset;
        case ''
            dates=get_files(ratname,'fromdate',from,'todate',to);
        case 'span_surgery'
            first_few = first_few + last_few_pre; % 3 pre sessions & X post sessions = X+3;
            infile = 'psych_before';
            fname = [outdir infile '.mat'];
            load(fname);

            % save only data from the last session
            cumtrials = cumsum(numtrials);
            fnames = {'hit_history', 'side_list', ...
                'left_tone','right_tone', ...
                'logdiff','logflag', 'psychflag'};
            for f = 1:length(fnames)
                if length(cumtrials) <= last_few_pre
                    str=['pre_' fnames{f} ' = ' fnames{f} ';'];
                else
                    str=['pre_' fnames{f} ' = ' fnames{f} '((cumtrials(end-last_few_pre))+1:cumtrials(end));'];
                end;
                eval(str);
            end;
            lf = last_few_pre-1;
            if length(cumtrials) <= last_few_pre
                pre_dates = dates;
                pre_numtrials = numtrials;
            else
                pre_dates = dates(end-lf:end);
                pre_numtrials = numtrials(end-lf:end);
            end;


            % now load 'after' data
            infile = 'psych_after';
            fname = [outdir infile '.mat'];
            load(fname);

            fnames = {'hit_history', 'side_list', ...
                'left_tone','right_tone', ...
                'logdiff','logflag', 'psychflag'};

            for f = 1:length(fnames)
                str=[fnames{f} ' = horzcat(pre_' fnames{f} ', ' fnames{f} ');'];
                eval(str);
            end;
            newdates = pre_dates;
            newdates(end+1:end+length(dates)) = dates;
            dates= newdates;
            numtrials = horzcat(pre_numtrials, numtrials);

            psych = psychflag;

        otherwise
            error('invalid use_dateset');
    end;
end;
% END Date set retrieving module
% ---------------------------------------------------------

final__xcomm = [];
final__xmid = [];
final__xfin = [];
final__weber= [];

% If we're not preloading from a file -------------------------------------
if ~exist('numtrials', 'var') % don't overwrite it if it exists
    numtrials = [];
    daily__xx = {};
    daily__yy = {};
    first__yy = [];
    first__binnedy=[];
       last__binnedy=[];
    mydates = {};
    badfits = {};

end;
if strcmpi(use_dateset,'given') || strcmpi(use_dateset,'')

    % -----------------------------------
    % Variables to filter a range of sessions
    % in your dataset >> BEGIN
    dend = min(dend, rows(dates));
    failed_dates = [];

    if lastfew < 1000
        lastfew = min(rows(dates), lastfew);
        dstart = rows(dates)-(lastfew-1);
    end;

    if dstart > 1
        startidx= cumtrials(dstart-1) +1;
    end;
    %   fprintf(1,'*** %s: Date filter: Using %i to %i (%i to %i)\n', mfilename, dstart, dend, startidx, lastidx);
    setidx=dstart:dend;
    % << END filtering session dates

    for d = setidx
        tmp = dates{d}; prevtmp='';
        if d > 1, prevtmp = dates{d-1}; end;
        if strcmpi(tmp(1:end-1),prevtmp(1:end-1))
            warning('Potential duplicate: %s & %s found. Skipping %s.\n', prevtmp, tmp, tmp);
        else
            [weber betahat bias xx yy xmid xcomm xfin replong tally bins]=psychometric_curve(ratname, 0, ...
                'usedate', tmp, 'noplot', 1, 'suppress_stdout',1);

            daily__xx{end+1} = xx;
            daily__yy{end+1} = yy;
            first__yy = horzcat(first__yy, yy(1));            
            first__binnedy=horzcat(first__binnedy, replong(1) / tally(1));
            last__binnedy=horzcat(last__binnedy, replong(end) / tally(end));

            if isnan(first__binnedy(end))
                2;
            end;
            
            
            if weber ==-1
                failed_dates = horzcat(failed_dates,d);
                final__xcomm = horzcat(final__xcomm,NaN);
                final__xmid = horzcat(final__xmid ,NaN);
                final__xfin = horzcat(final__xfin,NaN);
                final__weber= horzcat(final__weber,NaN);
            else
                final__xcomm = horzcat(final__xcomm,xcomm);
                final__xmid = horzcat(final__xmid ,xmid);
                final__xfin = horzcat(final__xfin,xfin);
                final__weber= horzcat(final__weber,weber);
            end;
        end;
    end;

    if strcmpi(task(1:3),'dua')
        final__xcomm = log2(final__xcomm);
        final__xmid = log2(final__xmid);
        final__xfin = log2(final__xfin);
    else
        final__xcomm = log(final__xcomm);
        final__xmid = log(final__xmid);
        final__xfin = log(final__xfin);
    end;

    % Loading from pre-buffered file -------------------------------------
else %strcmpi(use_dateset(1:5),'psych')
    in={};

    % -----------------------------------
    % Variables to filter a range of sessions
    % in your dataset >> BEGIN
    dend = min(dend, length(dates));
    cumtrials = cumsum(numtrials(1:dend));
    lastidx = cumtrials(end);
    startidx = 1;

    if lastfew < 1000
        lastfew = min(rows(dates), lastfew);
        dstart = rows(dates)-(lastfew-1);
    end;

    if dstart > 1
        startidx= cumtrials(dstart-1) +1;
    end;
    fprintf(1,'*** %s: Date filter: Using %i to %i (%i to %i)\n', mfilename, dstart, dend, startidx, lastidx);
    % << END filtering session dates

    setidx=dstart:dend;

    in.ltone = left_tone(startidx:lastidx);
    in.rtone = right_tone(startidx:lastidx);
    in.psych_on = psychflag(startidx:lastidx);
    in.slist = side_list(startidx:lastidx);
    in.dates = dates(dstart:dend);
    in.hit_history = hit_history(startidx:lastidx);
    in.numtrials = numtrials(dstart:dend);
    in.binmin =binmin;
    in.binmax = binmax;

    dates = dates(dstart:dend);

    out = psych_oversessions(ratname, in,'pitch', pitch,'psychthresh',psychthresh);
    f = findobj('Tag', [ratname '_psych_curve']); close(f);
    fnames = fieldnames(out);
    for f=1:length(fnames)
        eval([ fnames{f} ' = out.' fnames{f} ';']);
    end;

    leftover = setdiff(1:length(xcomm), failed_dates);
    old_dates = dates;
    dates= dates(leftover);

    % print out failed dates
    fprintf(1,'----------------\n');
    fprintf(1,'Failed dates:\n');
    for f = 1:length(failed_dates)
        fprintf(1,'\t%s\n', old_dates{failed_dates(f)});
    end;
    fprintf(1,'----------------\n');

    final__xcomm = xcomm;
    final__xmid = xmid;
    final__xfin = xfin;
    final__weber= weber;
end;

mydates = dates;
badfits = find(isnan(final__weber));
first__yy(badfits) = NaN;

%first__binnedy(badfits) = NaN;


% Now plot endpoints
if noplot == 0
    tstr = sprintf('%s: from %s to %s', ratname, dates{1}, dates{end});
    figure;
    subplot(2,1,1);
    plot(first__yy,'.r','MarkerSize',20);hold on;
    line([0 length(first__yy)], [0 0], 'LineStyle',':','LineWidth',2,'Color',[0.7 0.7 0.7]);
    text(0.1, 0.01, '0%','FontSize', 14, 'FontWeight','bold');
    xlabel('Session #');
    ylabel(sprintf('%% reported %s',ylbl));
    title({tstr,'Lowest y-value of psych fit'});
    axes__format(gca);
    set(get(gca,'YLabel'), 'FontSize', 14);
    set(gca,'YLim',[-0.25 0.25], 'YTick', -0.25:0.1:0.25, 'YTickLabel', -25:10:25);
    set(get(gca,'Title'), 'FontSize', 14);

    subplot(2,1,2);
    plot(first__binnedy,'.k','MarkerSize',20);hold on;
    plot(badfits, first__binnedy(badfits), '.r','MarkerSize', 20);
    line([0 length(first__binnedy)], [0.1 0.1], 'LineStyle',':','LineWidth',2,'Color',[0.7 0.7 0.7]);
    text(0.1, 0.11, '10%','FontSize', 14, 'FontWeight','bold');
    xlabel('Session #');
    ylabel(sprintf('%% reported %s',ylbl));
    set(gca,'YLim',[0 0.25], 'YTick', 0:0.05:0.25, 'YTickLabel', 0:5:25);

    axes__format(gca);
    set(get(gca,'YLabel'), 'FontSize', 14);
    title('Lowest binned y-value');
    set(get(gca,'Title'), 'FontSize', 14);

    sign_fname(gcf, mfilename);
end;

